// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VEEffectsSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import BanubaLicenseServicingSDK
import BanubaSDKServicing
import BanubaUtilities
import CoreMedia
import Foundation
import GLKit
import MetalKit
import QuartzCore
import Swift
import UIKit
@_exported import VEEffectsSDK
import VideoEditor
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class VideoCompositionRenderQueue {
  public static let queue: Dispatch.DispatchQueue
  @objc deinit
}
public class ShapeDrawer : VideoEditor.CompositionRenderering {
  public var shapeTexture: (any Metal.MTLTexture)?
  required public init()
  public init(renderer: any VEEffectsSDK.EffectRenderer)
  public func render(in pixelBuffer: CoreVideo.CVPixelBuffer, source allSources: CoreVideo.CVPixelBuffer, sampleTime: CoreMedia.CMTime, effect: any VideoEditor.EditorCompositionEffectProtocol, additionalParameters: [Swift.String : Any]?)
  @objc deinit
}
@_inheritsConvenienceInitializers public class BanubaMaskDrawer : VEEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
public class VideoEditorEffectDrawer : VideoEditor.CompositionRenderering {
  public var renderer: (any VEEffectsSDK.EffectRenderer)? {
    get
  }
  required public init()
  public func render(in pixelBuffer: CoreVideo.CVPixelBuffer, source: CoreVideo.CVPixelBuffer, sampleTime: CoreMedia.CMTime, effect: any VideoEditor.EditorCompositionEffectProtocol, additionalParameters: [Swift.String : Any]?)
  @objc deinit
}
public protocol EffectsApplicatorServicing : AnyObject {
  var blurApplicatorService: any VEEffectsSDK.BlurApplicatorServicing { get }
  init(editor: any VideoEditor.VideoEditorServicing, effectConfigHolder: any VEEffectsSDK.EffectsHolderServicing)
  func applyVisualEffectApplicatorType(_ type: VEEffectsSDK.VisualEffectApplicatorType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, removeSameType: Swift.Bool, effectId: Swift.UInt)
  func applyAutoCutVisualEffect(applicatorType: VEEffectsSDK.VisualEffectApplicatorType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, effectId: Swift.UInt)
  func applySpeedEffectType(_ type: VEEffectsSDK.SpeedEffectType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, removeSameType: Swift.Bool, effectId: Swift.UInt)
  func applyOverlayEffectType(_ type: VEEffectsSDK.OverlayEffectApplicatorType, effectInfo: VEEffectsSDK.VideoEditorEffectInfo)
  func addTransformEffect(atStartTime start: CoreMedia.CMTime, end: CoreMedia.CMTime, rotation: VideoEditor.AssetRotation, isVideoFitsAspect: Swift.Bool)
  func applyTransitionEffect(type: BanubaUtilities.TransitionType, effectInfo: VEEffectsSDK.TransitionEffectInfo)
  func applyAutoCutTransitionEffect(type: BanubaUtilities.TransitionType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime)
}
public class EffectApplicator : VEEffectsSDK.EffectsApplicatorServicing {
  final public let blurApplicatorService: any VEEffectsSDK.BlurApplicatorServicing
  required public init(editor: any VideoEditor.VideoEditorServicing, effectConfigHolder: any VEEffectsSDK.EffectsHolderServicing)
  @objc deinit
}
extension VEEffectsSDK.EffectApplicator {
  public func applyVisualEffectApplicatorType(_ type: VEEffectsSDK.VisualEffectApplicatorType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, removeSameType: Swift.Bool, effectId: Swift.UInt)
  public func applyAutoCutVisualEffect(applicatorType: VEEffectsSDK.VisualEffectApplicatorType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, effectId: Swift.UInt)
}
extension VEEffectsSDK.EffectApplicator {
  public func applySpeedEffectType(_ type: VEEffectsSDK.SpeedEffectType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, removeSameType: Swift.Bool, effectId: Swift.UInt)
}
extension VEEffectsSDK.EffectApplicator {
  public func applyOverlayEffectType(_ type: VEEffectsSDK.OverlayEffectApplicatorType, effectInfo: VEEffectsSDK.VideoEditorEffectInfo)
}
extension VEEffectsSDK.EffectApplicator {
  public func applyColorEffect(name: Swift.String, lutUrl: Foundation.URL, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, removeSameType: Swift.Bool, effectId: Swift.UInt)
}
extension VEEffectsSDK.EffectApplicator {
  public func addTransformEffect(atStartTime start: CoreMedia.CMTime, end: CoreMedia.CMTime, rotation: VideoEditor.AssetRotation, isVideoFitsAspect: Swift.Bool)
}
extension VEEffectsSDK.EffectApplicator {
  public func applyTransitionEffect(type: BanubaUtilities.TransitionType, effectInfo: VEEffectsSDK.TransitionEffectInfo)
  public func applyAutoCutTransitionEffect(type: BanubaUtilities.TransitionType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime)
}
@_inheritsConvenienceInitializers public class ColorEffectDrawer : VEEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
public class WatermarkApplicator : VideoEditor.WatermarkApplicatorServicing {
  public init()
  public func adjustWatermarkEffect(configuration: VideoEditor.WatermarkConfiguration, videoSize: CoreFoundation.CGSize) -> VideoEditor.VideoEditorFilterModel
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BanubaMaskRenderer : VEEffectsSDK.EffectRenderer {
  public static var postprocessServicing: (any BanubaSDKServicing.SDKMaskPostprocessServicing)?
  public func render(in pixelBuffer: CoreVideo.CVPixelBuffer, source: CoreVideo.CVPixelBuffer, sampleTime: CoreMedia.CMTime, startTime: CoreMedia.CMTime, path: Swift.String, additionalParameters: [Swift.String : Any]?)
  @objc deinit
  public static func destroy()
  public static func loadEffectPath(_ path: Swift.String)
}
public class EffectMetalRenderer : VEEffectsSDK.EffectRenderer {
  required public init()
  public func render(in pixelBuffer: CoreVideo.CVPixelBuffer, source: CoreVideo.CVPixelBuffer, sampleTime: CoreMedia.CMTime, startTime: CoreMedia.CMTime, path: Swift.String, additionalParameters: [Swift.String : Any]?)
  @objc deinit
}
public class EditorEffectModelBuilder {
  public init()
  public func gifModel(id: Swift.UInt, rendererInstance: (any VideoEditor.CompositionRenderering)?) -> VideoEditor.VideoEditorFilterModel
  public func textModel(id: Swift.UInt, rendererInstance: (any VideoEditor.CompositionRenderering)?) -> VideoEditor.VideoEditorFilterModel
  public func blurModel(id: Swift.UInt, rendererInstance: (any VideoEditor.CompositionRenderering)?, rendererTexture: (any Metal.MTLTexture)?) -> VideoEditor.VideoEditorFilterModel
  public func makeModels(configs: [[VEEffectsSDK.EditorEffectKey : Any]], startId: Swift.UInt) -> [VideoEditor.VideoEditorFilterModel]
  public func makeModel(config: [VEEffectsSDK.EditorEffectKey : Any], id: Swift.UInt) -> VideoEditor.VideoEditorFilterModel
  @objc deinit
}
@_inheritsConvenienceInitializers public class PixelationStaticEffectRenderer : VEEffectsSDK.EffectMetalRenderer {
  override public func render(in pixelBuffer: CoreVideo.CVPixelBuffer, source: CoreVideo.CVPixelBuffer, sampleTime: CoreMedia.CMTime, startTime: CoreMedia.CMTime, path: Swift.String, additionalParameters: [Swift.String : Any]?)
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class RotateEffectDrawer : VEEffectsSDK.VideoEditorEffectDrawer {
  required public init(rotation: VideoEditor.AssetRotation, isVideoFitsAspect: Swift.Bool)
  required public init()
  @objc deinit
}
public protocol ImagesSequence {
  var relativeScreenPoints: VEEffectsSDK.ImagePoints { get }
  func getImage(at time: Foundation.TimeInterval) -> CoreGraphics.CGImage
}
public protocol EffectsHolderServicing : AnyObject {
  init(license: BanubaLicenseServicingSDK.License)
  var transitionEffectsConfig: [[VEEffectsSDK.EditorEffectKey : Any]] { get }
  var speedEffectsConfig: [[VEEffectsSDK.EditorEffectKey : Any]] { get }
  var visualEffectsConfig: [[VEEffectsSDK.EditorEffectKey : Any]] { get }
}
@objc final public class EditorEffectsConfigHolder : ObjectiveC.NSObject, VEEffectsSDK.EffectsHolderServicing {
  public init(license: BanubaLicenseServicingSDK.License)
  public init(token: Swift.String)
  final public var transitionEffectsConfig: [[VEEffectsSDK.EditorEffectKey : Any]] {
    get
  }
  final public var speedEffectsConfig: [[VEEffectsSDK.EditorEffectKey : Any]] {
    get
  }
  final public var visualEffectsConfig: [[VEEffectsSDK.EditorEffectKey : Any]] {
    get
  }
  @objc deinit
}
public struct TransitionEffectInfo {
  public var type: VEEffectsSDK.TransitionEffectType {
    get
  }
  public var start: CoreMedia.CMTime {
    get
  }
  public var end: CoreMedia.CMTime {
    get
  }
  public init(type: VEEffectsSDK.TransitionEffectType, start: CoreMedia.CMTime, end: CoreMedia.CMTime)
}
public protocol TransformEffectsSDKServicing {
  var effectsApplicator: any VEEffectsSDK.EffectsApplicatorServicing { get }
}
public protocol EffectsSDKServicing : VEEffectsSDK.TransformEffectsSDKServicing {
  var watermarkApplicator: any VideoEditor.WatermarkApplicatorServicing { get }
  var effectsConfigHolder: any VEEffectsSDK.EffectsHolderServicing { get }
}
public struct ImagePoints {
  public init(leftTop: CoreFoundation.CGPoint, rightTop: CoreFoundation.CGPoint, leftBottom: CoreFoundation.CGPoint, rightBottom: CoreFoundation.CGPoint)
  public var leftTop: CoreFoundation.CGPoint
  public var rightTop: CoreFoundation.CGPoint
  public var leftBottom: CoreFoundation.CGPoint
  public var rightBottom: CoreFoundation.CGPoint
  public func applying(_ t: CoreFoundation.CGAffineTransform) -> VEEffectsSDK.ImagePoints
}
public class ImageEffectInfo {
  final public let image: CoreGraphics.CGImage
  final public let imagePoints: VEEffectsSDK.ImagePoints
  public init(image: CoreGraphics.CGImage, imagePoints: VEEffectsSDK.ImagePoints)
  @objc deinit
}
public struct EffectIDs {
  public static let colorEffectStartId: Swift.UInt
  public static let maskEffectStartId: Swift.UInt
  public static let speedEffectStartId: Swift.UInt
  public static let visualEffectStartId: Swift.UInt
  public static let transformEffectId: Swift.UInt
  public static let blurEffectId: Swift.UInt
}
public protocol EffectRenderer {
  func render(in pixelBuffer: CoreVideo.CVPixelBuffer, source: CoreVideo.CVPixelBuffer, sampleTime: CoreMedia.CMTime, startTime: CoreMedia.CMTime, path: Swift.String, additionalParameters: [Swift.String : Any]?)
}
@objc public class CameraLutStage : ObjectiveC.NSObject {
  @objc public var name: Swift.String
  @objc public var isActive: Swift.Bool
  public init(file url: Foundation.URL)
  @objc deinit
}
extension VEEffectsSDK.CameraLutStage : BanubaSDKServicing.RenderEffect {
  @objc dynamic public var isLoaded: Swift.Bool {
    @objc get
  }
  @objc dynamic public func load()
  @objc dynamic public func unload()
  @objc dynamic public func apply(pixelBuffer: CoreVideo.CVPixelBuffer)
}
public struct VideoEditorEffectInfo {
  public let uuid: Swift.String
  public let image: UIKit.UIImage?
  public let relativeScreenPoints: VEEffectsSDK.ImagePoints?
  public let start: CoreMedia.CMTime
  public let end: CoreMedia.CMTime
  public init(uuid: Swift.String, image: UIKit.UIImage? = nil, relativeScreenPoints: VEEffectsSDK.ImagePoints? = nil, start: CoreMedia.CMTime, end: CoreMedia.CMTime)
}
public protocol BlurApplicatorServicing : AnyObject {
  func changeTextureLocation(drawableFigure: BanubaUtilities.DrawableFigure, shapeRenderer: VEEffectsSDK.ShapeDrawer, coordinates: BanubaUtilities.BlurCoordinateParams, completion: (() -> Swift.Void)?)
}
@_hasMissingDesignatedInitializers public class BlurApplicator : VEEffectsSDK.BlurApplicatorServicing {
  public func changeTextureLocation(drawableFigure: BanubaUtilities.DrawableFigure, shapeRenderer: VEEffectsSDK.ShapeDrawer, coordinates: BanubaUtilities.BlurCoordinateParams, completion: (() -> Swift.Void)?)
  @objc deinit
}
public enum EditorEffectKey : Swift.String {
  case name
  case type
  case warpType
  case speed
  case renderer
  case path
  case id
  case effectType
  case additionalParameters
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OverlayEffectApplicatorType {
  case gif
  case text
  case blur(drawableFigure: BanubaUtilities.DrawableFigure, coordinates: BanubaUtilities.BlurCoordinateParams)
}
public enum VisualEffectApplicatorType : Swift.String, Swift.CaseIterable {
  case acid
  case cathode
  case dvCam
  case flash
  case glitch
  case glitchEffect2
  case glitch3
  case heatmap
  case lumeire
  case kaleidoscope
  case dslrKaleidoscope
  case pixelationDynamic
  case pixelationStatic
  case polaroid
  case rave
  case soul
  case stars
  case tvFoam
  case transition1
  case transition4
  case twitch
  case vhs
  case vhs2
  case zoom
  case zoom2
  case transitionDiagonal
  case transitionDefocus
  case transitionTunnelVision
  case transitionTunnelMirrored
  public var id: Swift.Int {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [VEEffectsSDK.VisualEffectApplicatorType]
  public typealias RawValue = Swift.String
  public static var allCases: [VEEffectsSDK.VisualEffectApplicatorType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum SpeedEffectType : Swift.String, Swift.CaseIterable {
  case slowmo
  case rapid
  public init?(rawValue: Swift.String)
  public typealias AllCases = [VEEffectsSDK.SpeedEffectType]
  public typealias RawValue = Swift.String
  public static var allCases: [VEEffectsSDK.SpeedEffectType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum TransitionEffectType : Swift.String, Swift.CaseIterable {
  case normal
  case whipDown
  case whipUp
  case whipRight
  case whipLeft
  case scrollDown
  case scrollUp
  case scrollRight
  case scrollLeft
  case spinRight
  case fade
  public var id: Swift.Int {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [VEEffectsSDK.TransitionEffectType]
  public typealias RawValue = Swift.String
  public static var allCases: [VEEffectsSDK.TransitionEffectType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension VEEffectsSDK.TransitionEffectType {
  public static func type(from type: BanubaUtilities.TransitionType) -> VEEffectsSDK.TransitionEffectType
}
extension VEEffectsSDK.EditorEffectKey : Swift.Equatable {}
extension VEEffectsSDK.EditorEffectKey : Swift.Hashable {}
extension VEEffectsSDK.EditorEffectKey : Swift.RawRepresentable {}
extension VEEffectsSDK.VisualEffectApplicatorType : Swift.Equatable {}
extension VEEffectsSDK.VisualEffectApplicatorType : Swift.Hashable {}
extension VEEffectsSDK.VisualEffectApplicatorType : Swift.RawRepresentable {}
extension VEEffectsSDK.SpeedEffectType : Swift.Equatable {}
extension VEEffectsSDK.SpeedEffectType : Swift.Hashable {}
extension VEEffectsSDK.SpeedEffectType : Swift.RawRepresentable {}
extension VEEffectsSDK.TransitionEffectType : Swift.Equatable {}
extension VEEffectsSDK.TransitionEffectType : Swift.Hashable {}
extension VEEffectsSDK.TransitionEffectType : Swift.RawRepresentable {}
