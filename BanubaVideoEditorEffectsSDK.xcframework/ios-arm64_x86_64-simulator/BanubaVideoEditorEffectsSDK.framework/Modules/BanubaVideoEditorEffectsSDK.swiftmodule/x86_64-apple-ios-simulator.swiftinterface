// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name BanubaVideoEditorEffectsSDK
import AVFoundation
import BanubaLicenseServicingSDK
import BanubaSDKServicing
import BanubaUtilities
@_exported import BanubaVideoEditorEffectsSDK
import CoreMedia
import Foundation
import GLKit
import MetalKit
import OpenGLES
import QuartzCore
import Swift
import UIKit
import VideoEditor
@_inheritsConvenienceInitializers public class GlitchEffectDrawer2 : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class DVCamEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class SoulEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class GifEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init(sequence: BanubaVideoEditorEffectsSDK.ImagesSequence)
  required public init()
  public func createRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  @objc deinit
}
@_inheritsConvenienceInitializers public class FlashEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class BanubaMaskDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class Transition2EffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
public class VideoEditorEffectDrawer : VideoEditor.CompositionRenderering {
  public var renderer: BanubaVideoEditorEffectsSDK.EffectRenderer? {
    get
  }
  required public init()
  public func render(in pixelBuffer: CoreVideo.CVPixelBuffer, allSources: [CoreVideo.CVPixelBuffer], sampleTime: CoreMedia.CMTime, effect: VideoEditor.EditorCompositionEffectProtocol)
  @objc deinit
}
public protocol EffectsApplicatorServicing : AnyObject {
  init(editor: VideoEditor.VideoEditorServicing, effectConfigHolder: BanubaVideoEditorEffectsSDK.EffectsHolderServicing)
  func applyVisualEffectApplicatorType(_ type: BanubaVideoEditorEffectsSDK.VisualEffectApplicatorType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, removeSameType: Swift.Bool, effectId: Swift.UInt)
  func applySpeedEffectType(_ type: BanubaVideoEditorEffectsSDK.SpeedEffectType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, removeSameType: Swift.Bool, effectId: Swift.UInt)
  func applyOverlayEffectType(_ type: BanubaVideoEditorEffectsSDK.OverlayEffectApplicatorType, effectInfo: BanubaVideoEditorEffectsSDK.VideoEditorEffectInfo)
  func addTransformEffect(atStartTime start: CoreMedia.CMTime, end: CoreMedia.CMTime, rotation: VideoEditor.AssetRotation)
}
public class EffectApplicator : BanubaVideoEditorEffectsSDK.EffectsApplicatorServicing {
  required public init(editor: VideoEditor.VideoEditorServicing, effectConfigHolder: BanubaVideoEditorEffectsSDK.EffectsHolderServicing)
  @objc deinit
}
extension EffectApplicator {
  public func applyVisualEffectApplicatorType(_ type: BanubaVideoEditorEffectsSDK.VisualEffectApplicatorType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, removeSameType: Swift.Bool, effectId: Swift.UInt)
}
extension EffectApplicator {
  public func applySpeedEffectType(_ type: BanubaVideoEditorEffectsSDK.SpeedEffectType, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, removeSameType: Swift.Bool, effectId: Swift.UInt)
}
extension EffectApplicator {
  public func applyOverlayEffectType(_ type: BanubaVideoEditorEffectsSDK.OverlayEffectApplicatorType, effectInfo: BanubaVideoEditorEffectsSDK.VideoEditorEffectInfo)
}
extension EffectApplicator {
  public func applyColorEffect(name: Swift.String, lutUrl: Foundation.URL, startTime: CoreMedia.CMTime, endTime: CoreMedia.CMTime, removeSameType: Swift.Bool, effectId: Swift.UInt)
}
extension EffectApplicator {
  public func addTransformEffect(atStartTime start: CoreMedia.CMTime, end: CoreMedia.CMTime, rotation: VideoEditor.AssetRotation)
}
@_inheritsConvenienceInitializers public class ColorEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EffectsFactory {
  public static func cathodeEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func polaroidEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func soulEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func zoomEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func flashEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func raveEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func acidEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func tvFoamEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func vhsEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func colorEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func glitchEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func gifEffectRenderer(sequence: BanubaVideoEditorEffectsSDK.ImagesSequence) -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func textEffectRenderer(imageInfo: BanubaVideoEditorEffectsSDK.ImageEffectInfo) -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func glitch2EffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func glitch3EffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func transition1EffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func transition2EffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func transition3EffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func transition4EffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func zoom2EffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func kaleidoscopeEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func dslrkaleidoscopeEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func lumiereEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func dvcamEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func vhs2EffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func starsEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func heatmapEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func pixelationDynamicEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func pixelationStaticEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  public static func maskEffectRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  @objc deinit
}
public class WatermarkApplicator : VideoEditor.WatermarkApplicatorServicing {
  public init()
  public func adjustWatermarkEffect(configuration: VideoEditor.WatermarkConfiguration, videoSize: CoreGraphics.CGSize) -> VideoEditor.VideoEditorFilterModel
  @objc deinit
}
@_inheritsConvenienceInitializers public class Zoom2EffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class StarsEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class KaleidoscopeEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class BanubaMaskRenderer : BanubaVideoEditorEffectsSDK.EffectGLRenderer {
  public static var postprocessServicing: BanubaSDKServicing.SDKMaskPostprocessServicing?
  override public func render(in pixelBuffer: CoreVideo.CVPixelBuffer, allSources: [CoreVideo.CVPixelBuffer], sampleTime: CoreMedia.CMTime, startTime: CoreMedia.CMTime, path: Swift.String)
  @objc deinit
  public static func destroy()
  required public init()
}
@_inheritsConvenienceInitializers public class Transition3EffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
public class EditorEffectModelBuilder {
  public init()
  public func gifModel(id: Swift.UInt, rendererInstance: VideoEditor.CompositionRenderering?) -> VideoEditor.VideoEditorFilterModel
  public func textModel(id: Swift.UInt, rendererInstance: VideoEditor.CompositionRenderering?) -> VideoEditor.VideoEditorFilterModel
  public func makeModels(configs: [[BanubaVideoEditorEffectsSDK.EditorEffectKey : Any]], startId: Swift.UInt) -> [VideoEditor.VideoEditorFilterModel]
  public func makeModel(config: [BanubaVideoEditorEffectsSDK.EditorEffectKey : Any], id: Swift.UInt) -> VideoEditor.VideoEditorFilterModel
  @objc deinit
}
@_inheritsConvenienceInitializers public class PixelationDynamicEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class RotateEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init(rotation: VideoEditor.AssetRotation)
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZoomEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class TVFoamEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class Transition4EffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class Glitch3EffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class PixelationStaticEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class PolaroidEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class VHS2EffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class DSLRKaleidoscopeEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
public protocol ImagesSequence {
  var relativeScreenPoints: BanubaVideoEditorEffectsSDK.ImagePoints { get }
  func getImage(at time: Foundation.TimeInterval) -> CoreGraphics.CGImage
}
@_inheritsConvenienceInitializers public class GlitchEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
public protocol EffectsHolderServicing : AnyObject {
  init(token: Swift.String)
  var speedEffectsConfig: [[BanubaVideoEditorEffectsSDK.EditorEffectKey : Any]] { get }
  var visualEffectsConfig: [[BanubaVideoEditorEffectsSDK.EditorEffectKey : Any]] { get }
}
@objc public class EditorEffectsConfigHolder : ObjectiveC.NSObject, BanubaVideoEditorEffectsSDK.EffectsHolderServicing {
  required public init(token: Swift.String)
  public var speedEffectsConfig: [[BanubaVideoEditorEffectsSDK.EditorEffectKey : Any]] {
    get
  }
  public var visualEffectsConfig: [[BanubaVideoEditorEffectsSDK.EditorEffectKey : Any]] {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class LumiereEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class CathodeEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class Glitch2EffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
public struct ImagePoints {
  public init(leftTop: CoreGraphics.CGPoint, rightTop: CoreGraphics.CGPoint, leftBottom: CoreGraphics.CGPoint, rightBottom: CoreGraphics.CGPoint)
  public var leftTop: CoreGraphics.CGPoint
  public var rightTop: CoreGraphics.CGPoint
  public var leftBottom: CoreGraphics.CGPoint
  public var rightBottom: CoreGraphics.CGPoint
  public func applying(_ t: CoreGraphics.CGAffineTransform) -> BanubaVideoEditorEffectsSDK.ImagePoints
}
public class ImageEffectInfo {
  final public let image: CoreGraphics.CGImage
  final public let imagePoints: BanubaVideoEditorEffectsSDK.ImagePoints
  public init(image: CoreGraphics.CGImage, imagePoints: BanubaVideoEditorEffectsSDK.ImagePoints)
  @objc deinit
}
public struct EffectIDs {
  public static var colorEffectStartId: Swift.UInt
  public static var maskEffectStartId: Swift.UInt
  public static var speedEffectStartId: Swift.UInt
  public static var visualEffectStartId: Swift.UInt
  public static var transformEffectId: Swift.UInt
}
@_inheritsConvenienceInitializers public class Transition1EffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
public protocol EffectRenderer {
  func render(in pixelBuffer: CoreVideo.CVPixelBuffer, allSources: [CoreVideo.CVPixelBuffer], sampleTime: CoreMedia.CMTime, startTime: CoreMedia.CMTime, path: Swift.String)
}
public class EffectGLRenderer : BanubaVideoEditorEffectsSDK.EffectRenderer {
  required public init()
  @objc deinit
  public func render(in pixelBuffer: CoreVideo.CVPixelBuffer, allSources: [CoreVideo.CVPixelBuffer], sampleTime: CoreMedia.CMTime, startTime: CoreMedia.CMTime, path: Swift.String)
}
@objc public class CameraLutStage : ObjectiveC.NSObject {
  @objc public var name: Swift.String
  @objc public var isActive: Swift.Bool
  public init(file url: Foundation.URL)
  @objc deinit
  @objc override dynamic public init()
}
extension CameraLutStage : BanubaSDKServicing.RenderEffect {
  @objc dynamic public var isLoaded: Swift.Bool {
    @objc get
  }
  @objc dynamic public func load(size: CoreGraphics.CGSize)
  @objc dynamic public func unload()
  @objc dynamic public func apply(params: Swift.Dictionary<Swift.String, Swift.String>)
}
public struct VideoEditorEffectInfo {
  public var id: Swift.UInt {
    get
  }
  public var image: UIKit.UIImage {
    get
  }
  public var relativeScreenPoints: BanubaVideoEditorEffectsSDK.ImagePoints {
    get
  }
  public var start: CoreMedia.CMTime {
    get
  }
  public var end: CoreMedia.CMTime {
    get
  }
  public init(id: Swift.UInt, image: UIKit.UIImage, relativeScreenPoints: BanubaVideoEditorEffectsSDK.ImagePoints, start: CoreMedia.CMTime, end: CoreMedia.CMTime)
}
@_inheritsConvenienceInitializers public class HeatmapEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
public enum EditorEffectKey : Swift.String {
  case name
  case type
  case warpType
  case speed
  case renderer
  case path
  case id
  case effectType
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OverlayEffectApplicatorType {
  case gif
  case text
  public static func == (a: BanubaVideoEditorEffectsSDK.OverlayEffectApplicatorType, b: BanubaVideoEditorEffectsSDK.OverlayEffectApplicatorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum VisualEffectApplicatorType : Swift.String {
  case acid
  case cathode
  case dslrKaleidoscope
  case dvCam
  case flash
  case glitch2
  case glitch3
  case glitch
  case glitchEffect2
  case kaleidoscope
  case heatmap
  case lumeire
  case pixelationDynamic
  case pixelationStatic
  case polaroid
  case rave
  case soul
  case stars
  case transition
  case transition2
  case transition3
  case transition4
  case tvFoam
  case vhs
  case vhs2
  case zoom
  case zoom2
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SpeedEffectType : Swift.String {
  case slowmo
  case rapid
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers public class VHSEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class TextEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init(imageInfo: BanubaVideoEditorEffectsSDK.ImageEffectInfo)
  required public init()
  public func createRenderer() -> BanubaVideoEditorEffectsSDK.EffectRenderer
  @objc deinit
}
@_inheritsConvenienceInitializers public class RaveEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class AcidWhipEffectDrawer : BanubaVideoEditorEffectsSDK.VideoEditorEffectDrawer {
  required public init()
  @objc deinit
}
